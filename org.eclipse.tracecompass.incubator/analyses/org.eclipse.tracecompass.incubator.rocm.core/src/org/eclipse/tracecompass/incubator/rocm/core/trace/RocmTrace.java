/**********************************************************************
 * Copyright (c) 2022 École Polytechnique de Montréal
 *
 * All rights reserved. This program and the accompanying materials are
 * made available under the terms of the Eclipse Public License 2.0 which
 * accompanies this distribution, and is available at
 * https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 **********************************************************************/

package org.eclipse.tracecompass.incubator.rocm.core.trace;

import java.util.Collection;
import java.util.HashMap;
import java.util.Map;

import org.eclipse.core.resources.IFile;
import org.eclipse.core.resources.IProject;
import org.eclipse.core.resources.IResource;
import org.eclipse.core.runtime.IStatus;
import org.eclipse.core.runtime.Status;
import org.eclipse.jdt.annotation.NonNull;
import org.eclipse.jdt.annotation.Nullable;
import org.eclipse.tracecompass.incubator.internal.rocm.core.Activator;
import org.eclipse.tracecompass.incubator.internal.rocm.core.analysis.RocmStrings;
import org.eclipse.tracecompass.tmf.core.event.ITmfEvent;
import org.eclipse.tracecompass.tmf.core.event.ITmfEventType;
import org.eclipse.tracecompass.tmf.core.event.aspect.ITmfEventAspect;
import org.eclipse.tracecompass.tmf.core.event.aspect.TmfBaseAspects;
import org.eclipse.tracecompass.tmf.core.exceptions.TmfTraceException;
import org.eclipse.tracecompass.tmf.core.filter.ITmfFilter;
import org.eclipse.tracecompass.tmf.core.timestamp.TmfTimeRange;
import org.eclipse.tracecompass.tmf.core.trace.ITmfContext;
import org.eclipse.tracecompass.tmf.core.trace.ITmfTraceWithPreDefinedEvents;
import org.eclipse.tracecompass.tmf.core.trace.TmfTraceContext;
import org.eclipse.tracecompass.tmf.core.trace.TraceValidationStatus;
import org.eclipse.tracecompass.tmf.ctf.core.context.CtfLocation;
import org.eclipse.tracecompass.tmf.ctf.core.context.CtfLocationInfo;
import org.eclipse.tracecompass.tmf.ctf.core.trace.CtfTmfTrace;
import org.eclipse.tracecompass.tmf.ctf.core.trace.CtfTraceValidationStatus;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableList.Builder;
import com.google.common.collect.ImmutableSet;

/**
 * Traces generated by the ROCm environment (ROC-tracer and/or ROC-profiler)
 * that use the CTF format. These traces are identified using the tracer_name
 * environment variable.
 *
 * @author Arnaud Fiorini
 */
public class RocmTrace extends CtfTmfTrace {

    private static final @NonNull Collection<@NonNull ITmfEventAspect<?>> ROCM_CTF_ASPECTS = ImmutableList.of(
            TmfBaseAspects.getTimestampAspect(),
            TmfBaseAspects.getEventTypeAspect(),
            TmfBaseAspects.getContentsAspect(),
            TmfBaseAspects.getTraceNameAspect());

    /** Collection of aspects, default values */
    private @NonNull Collection<ITmfEventAspect<?>> fAspects = ImmutableSet.copyOf(ROCM_CTF_ASPECTS);

    private static final int CONFIDENCE = 100;
    /**
     * This is a reduction factor to avoid overflows.
     */
    private static final int REDUCTION_FACTOR = 4096;

    private static final int VERSION = 1;

    /** Api type mapped to integer ids */
    private Map<String, Integer> fApiMap;

    /**
     * Constructor
     */
    public RocmTrace() {
        super();
    }

    @Override
    public Iterable<ITmfEventAspect<?>> getEventAspects() {
        return fAspects;
    }

    @Override
    public void initTrace(final IResource resource, final String path,
            final Class<? extends ITmfEvent> eventType) throws TmfTraceException {
        super.initTrace(resource, path, eventType);

        initializeApiMap();

        ImmutableList.Builder<ITmfEventAspect<?>> builder = new Builder<>();
        builder.add(GpuAspect.INSTANCE);
        builder.addAll(createRocmAspects(this));
        builder.addAll(ROCM_CTF_ASPECTS);
        builder.addAll(createCounterAspects(this));
        fAspects = builder.build();
    }

    /**
     * @param apiName
     *            the name of API (HIP, HSA)
     * @return the api ID
     */
    public int getApiId(String apiName) {
        return fApiMap.getOrDefault(apiName, -1);
    }

    /**
     * @return the number of API defined in the trace
     */
    public int getNApi() {
        return fApiMap.size();
    }

    private void initializeApiMap() {
        fApiMap = new HashMap<>();
        for (ITmfEventType eventType : getContainedEventTypes()) {
            if (eventType.getName().endsWith("_api")) { //$NON-NLS-1$
                fApiMap.put(eventType.getName(), fApiMap.size());
            }
        }
    }

    private static Collection<ITmfEventAspect<?>> createRocmAspects(ITmfTraceWithPreDefinedEvents trace) {
        ImmutableList.Builder<ITmfEventAspect<?>> builder = new Builder<>();

        for (ITmfEventType eventType : trace.getContainedEventTypes()) {
            if (eventType.getName().equals(RocmStrings.HSA_API)) {
                builder.add(RocmAspects.getQueueIDAspect());
                builder.add(RocmAspects.getQueueIndexAspect());
            }
            if (eventType.getName().equals(RocmStrings.HIP_API)) {
                builder.add(RocmAspects.getStreamIDAspect());
            }
        }
        builder.add(RocmAspects.getPIDAspect());
        builder.add(RocmAspects.getTIDAspect());
        builder.add(RocmAspects.getFunctionNameAspect());
        return builder.build();
    }

    private Collection<ITmfEventAspect<?>> createCounterAspects(ITmfTraceWithPreDefinedEvents trace) {
        ImmutableSet.Builder<ITmfEventAspect<?>> perfBuilder = new ImmutableSet.Builder<>();
        ITmfContext context = seekEvent(new CtfLocation(new CtfLocationInfo(0L, 0L)));

        // Get the number of events or an arbitrary number to check if there is
        // any metric definition in the trace
        Map<String, String> environment = getEnvironment();
        int traceSize = 0;
        if (environment != null) {
            traceSize = Integer.parseInt(environment.get("nb_events")); //$NON-NLS-1$
        }
        int nEventsToRead = Integer.min(traceSize, 10000);

        for (ITmfEventType eventType : trace.getContainedEventTypes()) {
            if (eventType.getName().equals(RocmStrings.METRIC_NAME)) {
                for (int i = 0; i < nEventsToRead; i++) {
                    ITmfEvent event = getNext(context);
                    if (event.getName().equals(RocmStrings.METRIC_NAME_END)) {
                        break;
                    }
                    if (event.getName().equals(RocmStrings.METRIC_NAME)) {
                        buildCounterAspectsFromEvent(perfBuilder, event);
                    }
                }
                break;
            }
        }

        return perfBuilder.build();
    }

    private static void buildCounterAspectsFromEvent(ImmutableSet.Builder<ITmfEventAspect<?>> builder, ITmfEvent event) {
        String fieldName = event.getContent().getFieldValue(String.class, RocmStrings.NAME);
        if (fieldName != null) {
            Integer id = event.getContent().getFieldValue(Integer.class, RocmStrings.ID);
            builder.add(new RocmCounterAspect(fieldName, fieldName, GpuAspect.class, id));
        }
    }

    @Override
    public int size() {
        Map<String, String> environment = getEnvironment();
        if (environment != null) {
            String size = environment.get("nb_events"); //$NON-NLS-1$
            if (size != null) {
                return (int) (Long.parseLong(size) / REDUCTION_FACTOR);
            }
        }
        return super.size();
    }

    @Override
    public @Nullable IStatus validate(final @Nullable IProject project, final @Nullable String path) {
        IStatus status = super.validate(project, path);
        if (status instanceof CtfTraceValidationStatus) {
            Map<String, String> environment = ((CtfTraceValidationStatus) status).getEnvironment();
            /* Make sure the domain is "kernel" in the trace's env vars */
            String domain = environment.get("tracer_name"); //$NON-NLS-1$
            if (domain == null || !domain.equals("\"rocprof\"")) { //$NON-NLS-1$
                return new Status(IStatus.ERROR, Activator.PLUGIN_ID,
                        "This trace was not recognized as a ROCm trace. You can update your rocprofiler version or you can change manually the tracer name to \"rocprof\" in the metadata file to force the validation."); //$NON-NLS-1$
            }

            int tracerMajor = Integer.parseInt(environment.get("plugin_major")); //$NON-NLS-1$
            int tracerMinor = Integer.parseInt(environment.get("plugin_minor")); //$NON-NLS-1$
            return checkVersion(tracerMajor, tracerMinor);
        }
        return status;
    }

    private static IStatus checkVersion(int tracerMajor, int tracerMinor) {
        if (tracerMajor < VERSION) {
            return new Status(IStatus.ERROR, Activator.PLUGIN_ID, "The tracer version is " + tracerMajor + "." + tracerMinor + " and this version of the ROCm plugin supports only tracer with versions > 3.0"); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
        } else if (tracerMajor > VERSION) {
            return new Status(IStatus.ERROR, Activator.PLUGIN_ID, "The ROCm plugin version needs to be updated to support this new version of rocprofiler."); //$NON-NLS-1$
        }
        return new TraceValidationStatus(CONFIDENCE, Activator.PLUGIN_ID);
    }

    @Override
    public TmfTraceContext createTraceContext(TmfTimeRange selection, TmfTimeRange windowRange, @Nullable IFile editorFile, @Nullable ITmfFilter filter) {
        return new TmfTraceContext(selection, windowRange, editorFile, filter);
    }
}
